//布尔值
//%t	单词true或false

//整型
/*
	%b	表示为二进制
	%c	该值对应的unicode码值
	%d	表示为十进制
	%o	表示为八进制
	%q	该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示
	%x	表示为十六进制，使用a-f
	%X	表示为十六进制，使用A-F
	%U	表示为Unicode格式：U+1234，等价于"U+%04X"
 */

// 浮点和复数
/*
	%b	无小数部分、二进制指数的科学计数法，如-123456p-78；参见strconv.FormatFloat
	%e	科学计数法，如-1234.456e+78
	%E	科学计数法，如-1234.456E+78
	%f	有小数部分但无指数部分，如123.456
	%F	等价于%f
	%g	根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）
	%G	根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）
 */

// 字符串
/*
	%s	直接输出字符串或者[]byte
	%q	该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示
	%x	每个字节用两字符十六进制数表示（使用a-f）
	%X	每个字节用两字符十六进制数表示（使用A-F）
*/

//精度和宽度
/*
	%f:    默认宽度，默认精度
	%9f    宽度9，默认精度
	%.2f   默认宽度，精度2
	%9.2f  宽度9，精度2
	%9.f   宽度9，精度0
*/

package main

import "fmt"

func main() {
	// 通用
	/*
		%v	值的默认格式表示
		%+v	类似%v，但输出结构体时会添加字段名
		%#v	值的Go语法表示
		%T	值的类型的Go语法表示
		%%	百分号
	*/
	v1 := 16
	fmt.Printf("%v\n",v1)
	fmt.Printf("%+v\n",v1)
	fmt.Printf("%#v\n",v1)
	fmt.Printf("%T\n",v1)

	// 字符串
	/*
		%s	直接输出字符串或者[]byte
		%q	该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示
		%x	每个字节用两字符十六进制数表示（使用a-f）
		%X	每个字节用两字符十六进制数表示（使用A-F）
	*/
	s1 := "hello world"
	fmt.Printf("%s\n",s1)
	fmt.Printf("%q\n",s1)

	// 布尔值
	// %t	单词true或false
	fmt.Printf("%t\n",true)

	// 浮点数
	/*
		%b	无小数部分、二进制指数的科学计数法，如-123456p-78；参见strconv.FormatFloat
		%e	科学计数法，如-1234.456e+78
		%E	科学计数法，如-1234.456E+78
		%f	有小数部分但无指数部分，如123.456
		%F	等价于%f
		%g	根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）
		%G	根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）
	*/
	f1 := 3.14
	fmt.Printf("%b\n",f1)
	fmt.Printf("%e\n",f1)
	fmt.Printf("%E\n",f1)
	fmt.Printf("%f\n",f1)
	fmt.Printf("%g\n",f1)

	//精度和宽度
	//前宽后精
	/*
		%f:    默认宽度，默认精度
		%9f    宽度9，默认精度
		%.2f   默认宽度，精度2
		%9.2f  宽度9，精度2
		%9.f   宽度9，精度0
	*/
	f2 := 3.1415926
	fmt.Printf("%f\n",f2)
	fmt.Printf("%9f\n",f2)
	fmt.Printf("%.2f\n",f2)
	fmt.Printf("%9.f\n",f2)
}
