// 本包的正则表达式保证搜索复杂度为O(n)，其中n为输入的长度

//函数名
/*
all
	如果'All'出现了，该方法会返回输入中所有互不重叠的匹配结果
	如果一个匹配结果的前后（没有间隔字符）存在长度为0的成功匹配，该空匹配会被忽略
	包含All的方法会要求一个额外的整数参数n，如果n>=0，方法会返回最多前n个匹配结果

string
	如果'String'出现了，匹配对象为字符串
	否则应该是[]byte类型，返回值和匹配对象的类型是对应的

Submatch
	如果'Submatch'出现了，返回值是表示正则表达式中成功的组匹配（子匹配/次级匹配）的切片
	组匹配是正则表达式内部的括号包围的次级表达式（也被称为“捕获分组”），从左到右按左括号的顺序编号
	索引0的组匹配为完整表达式的匹配结果，1为第一个分组的匹配结果，依次类推
Index
	如果'Index'出现了，匹配/分组匹配会用输入流的字节索引对表示result[2*n:2*n+1]表示第n个分组匹配的的匹配结果
	如果没有'Index'，匹配结果表示为匹配到的文本
	如果索引为负数，表示分组匹配没有匹配到输入流中的文本
 */

//边界匹配
/*
   ^              匹配文本开始，标志m为真时，还匹配行首
   $              匹配文本结尾，标志m为真时，还匹配行尾
   \A             匹配文本开始
   \b             单词边界（一边字符属于\w，另一边为文首、文尾、行首、行尾或属于\W）
   \B             非单词边界
   \z             匹配文本结尾
 */

// 分组断言
/*
 		(re)           编号的捕获分组
        (?P<name>re)   命名并编号的捕获分组
        (?:re)         不捕获的分组
        (?flags)       设置当前所在分组的标志，不捕获也不匹配
        (?flags:re)    设置re段的标志，不捕获的分组
 */

// 匹配模式
/*
   I              大小写敏感（默认关闭）
   m              ^和$在匹配文本开始和结尾之外，还可以匹配行首和行尾（默认开启）
   s              让.可以匹配\n（默认关闭）
   U              非贪婪的：交换x*和x*?、x+和x+?……的含义（默认关闭）
 */
package main

func main() {

}
